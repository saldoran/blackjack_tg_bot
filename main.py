# main.py

from dotenv import load_dotenv
import os

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from telegram.error import Forbidden

import settings
from storage import storage
from economy import give_daily, reward_player
from game import Game, fmt_hand, hand_value

load_dotenv()

JOIN_TIMEOUT = settings.JOIN_TIMEOUT  # 60 —Å–µ–∫—É–Ω–¥

def make_private_kb(group_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÉè –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"hit:{group_id}")],
        [InlineKeyboardButton("‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data=f"stand:{group_id}")],
    ])


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! /newgame —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ 21.")


async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_id = update.effective_chat.id
    game = Game()
    context.chat_data['game'] = game
    context.chat_data['join_count'] = 0

    kb = InlineKeyboardMarkup([[InlineKeyboardButton(f"Join (0)", callback_data="join")]])
    msg = await update.message.reply_text(
        f"–ù–æ–≤–∞—è –∏–≥—Ä–∞! –ñ–¥—ë–º, –ø–æ–∫–∞ –∏–≥—Ä–æ–∫–∏ –Ω–∞–∂–º—É—Ç Join ({JOIN_TIMEOUT} —Å–µ–∫).",
        reply_markup=kb
    )
    context.chat_data['join_msg_id'] = msg.message_id

    context.job_queue.run_once(
        close_registration,
        when=JOIN_TIMEOUT,
        chat_id=group_id
    )


async def cb_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    group_id = update.effective_chat.id
    game: Game = context.chat_data.get('game')

    if not game or game.started:
        return await query.answer("–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –∏–¥—ë—Ç.", show_alert=True)

    if not game.add_player(user.id, user.first_name):
        return await query.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.", show_alert=True)

    try:
        await context.bot.send_message(
            user.id,
            "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –ñ–¥–∏—Ç–µ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ."
        )
        await query.answer()
    except Forbidden:
        game.players.pop(user.id, None)
        await query.answer()
        await context.bot.send_message(
            group_id,
            f"üë§ {user.first_name}, —è –Ω–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –ª–∏—á–∫—É. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start:\n"
            f"https://t.me/{(await context.bot.get_me()).username}"
        )
        return

    await context.bot.send_message(group_id, f"üë§ {user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.")
    count = context.chat_data.get('join_count', 0) + 1
    context.chat_data['join_count'] = count

    kb = InlineKeyboardMarkup([[InlineKeyboardButton(f"Join ({count})", callback_data="join")]])
    await context.bot.edit_message_reply_markup(
        chat_id=group_id,
        message_id=context.chat_data['join_msg_id'],
        reply_markup=kb
    )


async def close_registration(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    group_id = job.chat_id
    data = context.chat_data
    game: Game = data.get('game')
    count = data.get('join_count', 0)

    await context.bot.edit_message_reply_markup(
        chat_id=group_id,
        message_id=data.get('join_msg_id'),
        reply_markup=None
    )

    if count < 2:
        data['game'] = None
        return await context.bot.send_message(
            group_id,
            f"‚è± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è {count} –∏–≥—Ä–æ–∫(–æ–≤). –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )

    names = [p['name'] for p in game.players.values()]
    await context.bot.send_message(
        group_id,
        "‚è± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–≥—Ä–æ–∫–∏: " + ", ".join(names)
    )

    game.started = True
    game.deal_initial()
    for uid, p in game.players.items():
        await context.bot.send_message(
            uid,
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {fmt_hand(p['hand'])} ({hand_value(p['hand'])})",
            reply_markup=make_private_kb(group_id)
        )

    first = game.dealer[0]
    await context.bot.send_message(group_id, f"–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {first.rank}{first.suit}")


async def cb_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # —Ä–∞–∑–±–∏—Ä–∞–µ–º action –∏ group_id –∏–∑ callback_data –≤–∏–¥–∞ "hit:<group_id>" –∏–ª–∏ "stand:<group_id>"
    action, group_id = query.data.split(":")
    group_id = int(group_id)
    uid = query.from_user.id

    # –¥–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã –∏–∑ chat_data –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    game = context.application.chat_data.get(group_id, {}).get('game')

    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã—Ö–æ–¥–∏–º
    if not game or not game.started or uid not in game.players:
        await context.bot.edit_message_reply_markup(
            chat_id=uid,
            message_id=query.message.message_id,
            reply_markup=None
        )
        return await context.bot.send_message(uid, "–ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –≤ –Ω–µ–π.")

    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏)
    await context.bot.edit_message_reply_markup(
        chat_id=uid,
        message_id=query.message.message_id,
        reply_markup=None
    )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥
    if action == "hit":
        game.hit(uid)
        hand = game.players[uid]["hand"]
        score = hand_value(hand)

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–±–æ—Ä ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –≤—Å—ë, –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        if score > 21:
            await context.bot.edit_message_text(
                chat_id=uid,
                message_id=query.message.message_id,
                text=f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {fmt_hand(hand)} ({score})\n–ü–µ—Ä–µ–±–æ—Ä! –í—ã –≤—ã–±—ã–≤–∞–µ—Ç–µ."
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –∏ –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.edit_message_text(
                chat_id=uid,
                message_id=query.message.message_id,
                text=f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {fmt_hand(hand)} ({score})",
                reply_markup=make_private_kb(group_id)
            )

    else:  # action == "stand"
        game.players[uid]["stand"] = True
        await context.bot.edit_message_text(
            chat_id=uid,
            message_id=query.message.message_id,
            text="‚úã –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å."
        )

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –≤—Å–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ ‚Äî –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –≤ –≥—Ä—É–ø–ø–µ
    if game.all_done():
        game.dealer_play()
        result = game.results(group_id)
        await context.bot.send_message(group_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n" + result)
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
        context.application.chat_data[group_id]['game'] = None


async def cmd_deal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_id = update.effective_chat.id
    game: Game = context.chat_data.get('game')
    if not game or game.started:
        return await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –∏–¥—ë—Ç.")
    if not game.players:
        return await update.message.reply_text("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–∂–∞–ª Join.")

    names = [p['name'] for p in game.players.values()]
    await update.message.reply_text("–ò–≥—Ä–æ–∫–∏: " + ", ".join(names))

    game.started = True
    game.deal_initial()
    for uid, p in game.players.items():
        await context.bot.send_message(
            uid,
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {fmt_hand(p['hand'])} ({hand_value(p['hand'])})",
            reply_markup=make_private_kb(group_id)
        )

    first = game.dealer[0]
    await update.message.reply_text(f"–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {first.rank}{first.suit}")


async def cmd_daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    group_id = update.effective_chat.id
    ok, rem = give_daily(group_id, uid)
    if ok:
        bal = storage.get_user(group_id, uid)['money']
        await update.message.reply_text(f"üí∞ +{settings.DAILY_BONUS}! –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
    else:
        await update.message.reply_text(f"–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {rem} —á.")


async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    group_id = update.effective_chat.id
    u = storage.get_user(group_id, uid, update.effective_user.first_name)
    await update.message.reply_text(
        f"–ë–∞–ª–∞–Ω—Å: {u['money']} —Ñ–∏—à–µ–∫\n–ü–æ–±–µ–¥: {u['wins']}\n–ò–≥—Ä: {u['games']}"
    )


async def cmd_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_id = update.effective_chat.id
    top = storage.leaderboard(group_id, key="money", limit=5)
    lines = ["üèÜ –¢–æ–ø-5 –ø–æ —Ñ–∏—à–∫–∞–º:"]
    for i, u in enumerate(top, 1):
        lines.append(f"{i}. {u['name']} ‚Äî {u['money']} —Ñ–∏—à–µ–∫ (–ø–æ–±–µ–¥ {u['wins']})")
    await update.message.reply_text("\n".join(lines))


async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_id = update.effective_chat.id
    c = storage.chat_stats(group_id)
    await update.message.reply_text(f"–í—Å–µ–≥–æ –∏–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {c['games_played']}")


def main():
    token = os.getenv("TG_BOT_TOKEN")
    if not token:
        raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TG_BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CallbackQueryHandler(cb_join, pattern="^join$"))
    app.add_handler(CallbackQueryHandler(cb_action, pattern="^(hit|stand):"))
    app.add_handler(CommandHandler("deal", cmd_deal))

    app.add_handler(CommandHandler("daily", cmd_daily))
    app.add_handler(CommandHandler("balance", cmd_balance))
    app.add_handler(CommandHandler("leaderboard", cmd_leaderboard))
    app.add_handler(CommandHandler("stats", cmd_stats))

    print("Bot up...")
    app.run_polling()


if __name__ == "__main__":
    main()